<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Chad Adams</title>
    <link>https://cadams.ca/blog/categories/code/</link>
    <description>Recent content in Code on Chad Adams</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Chad Adams</copyright>
    <lastBuildDate>Mon, 31 Dec 2018 13:50:44 -0500</lastBuildDate>
    <atom:link href="https://cadams.ca/blog/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up Visual Studio Code for Elixir</title>
      <link>https://cadams.ca/blog/post/2018/12/31/setting-up-visual-studio-code-for-elixir/</link>
      <pubDate>Mon, 31 Dec 2018 13:50:44 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2018/12/31/setting-up-visual-studio-code-for-elixir/</guid>
      <description>

&lt;p&gt;Elixir is a programming language that I am in the process of learning, and which I use at work. This post documents the settings I am using to develop in elixir using the VSCode editor.&lt;/p&gt;

&lt;h2 id=&#34;1-language-support:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;1. Language Support&lt;/h2&gt;

&lt;p&gt;Install extension &lt;code&gt;ElixirLS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Out of the box this gives you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;autocomplete, navigation, dialyzer (aka static analysis/linting) and debugging capabilities. Hooray!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-formatting:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;2. Formatting&lt;/h2&gt;

&lt;p&gt;Elixir is an auto-formatted language for &lt;a href=&#34;https://hashrocket.com/blog/posts/format-your-elixir-code-now&#34;&gt;reasons&lt;/a&gt;, hence &lt;code&gt;mix format&lt;/code&gt; is your friend. In your VSCode Settings, hit the checkbox for &amp;ldquo;Editor: Format on Save&amp;rdquo; to run this on every save.&lt;/p&gt;

&lt;h2 id=&#34;3-test-execution:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;3. Test Execution&lt;/h2&gt;

&lt;p&gt;I commonly run tests three different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run a single test. Most frequently used while developing.&lt;/li&gt;
&lt;li&gt;Run &lt;em&gt;all&lt;/em&gt; the tests. Used for regression testing.&lt;/li&gt;
&lt;li&gt;Run all the tests from a single file. Sometimes useful while developing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set these up as Tasks in your tasks.json as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
      &amp;quot;label&amp;quot;: &amp;quot;mix test&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      }
  },
  {
      &amp;quot;label&amp;quot;: &amp;quot;single test&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test ${relativeFile}:${lineNumber}&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      },
      &amp;quot;runOptions&amp;quot;: {
          &amp;quot;reevaluateOnRerun&amp;quot;: false
      }
  },
  {
      &amp;quot;label&amp;quot;: &amp;quot;test current file&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test ${relativeFile}&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      },
      &amp;quot;runOptions&amp;quot;: {
          &amp;quot;reevaluateOnRerun&amp;quot;: false
      }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also create hotkeys to launch your tests. I do it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;key&amp;quot;: &amp;quot;ctrl-s&amp;quot;,
  &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
  &amp;quot;args&amp;quot;: &amp;quot;mix test&amp;quot;
},
{
  &amp;quot;key&amp;quot;: &amp;quot;ctrl+shift+s&amp;quot;,
  &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
  &amp;quot;args&amp;quot;: &amp;quot;single test&amp;quot;,
  &amp;quot;when&amp;quot;: &amp;quot;editorTextFocus&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s super easy to run a single test, or all the tests, on a whim.&lt;/p&gt;

&lt;p&gt;Use in combination with the standard &amp;ldquo;Rerun Last Task&amp;rdquo; (new in vscode 1.30) to run your single test over and over again without having to switch windows.&lt;/p&gt;

&lt;p&gt;With credit to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pragdave.me/blog/2018/06/13/visual-studio-code-elixir-tests.html&#34;&gt;https://pragdave.me/blog/2018/06/13/visual-studio-code-elixir-tests.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RiseToTheOccasion.ca Launched!</title>
      <link>https://cadams.ca/blog/post/2017/11/19/risetotheoccasion.ca-launched/</link>
      <pubDate>Sun, 19 Nov 2017 14:53:22 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2017/11/19/risetotheoccasion.ca-launched/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cadams.ca/blog/images/rtto.png&#34; alt=&#34;Image&#34; /&gt;
A directory I have been helping to build for &lt;a href=&#34;http://csedottawa.ca/&#34;&gt;CSED&lt;/a&gt; has officially launched!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://RiseToTheOccasion.ca&#34;&gt;RiseToTheOccasion.ca&lt;/a&gt; is a provincial directory of social enterprises for the event planning sector. If you&amp;rsquo;re planning to put on an event in Ontario, you might like to see what&amp;rsquo;s available, with over 80 enterprises currently listed.&lt;/p&gt;

&lt;p&gt;Expanding on the product delivered by our previous project (the Ottawa directory &lt;a href=&#34;https://WeAllProfit.ca&#34;&gt;WeAllProfit.ca&lt;/a&gt;), the new directory adds the following enhancements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bilingual&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;location-based searching&lt;/li&gt;
&lt;li&gt;administrative interface, so that individual enterprises as well as directory administrators can control content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The directory was officially launched at the &lt;em&gt;#SEUnleashed&lt;/em&gt; social enterprise conference in Ottawa on November 16th. As a contributor I was invited to attend the conference. I had a great time and gained valuable insights into the social enterprise sector. I posted more about the conference &lt;a href=&#34;https://cadams.ca/blog/post/2017/11/19/social-enterprise-unleashed-2017/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Architectus Oryzus</title>
      <link>https://cadams.ca/blog/post/2017/03/03/architectus-oryzus/</link>
      <pubDate>Fri, 03 Mar 2017 16:02:53 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2017/03/03/architectus-oryzus/</guid>
      <description>&lt;p&gt;Martin Fowler wrote &lt;a href=&#34;http://www.in-gmbh.eu/uploads/media/whoNeedsArchitect.pdf&#34;&gt;an article&lt;/a&gt; on software architecture almost 15 years ago. I just discovered it now while in the midst of changing jobs, and I found this part where he contrasts architect styles to be very relevant for me in this moment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Architectus Reloadus&lt;/em&gt; is the person who makes all the important decisions. The architect does this because a single mind is needed to ensure a system’s conceptual integrity,  and perhaps because the architect doesn’t think that the team members are sufficiently skilled to make those decisions. Often, such decisions must be made early on so that everyone else has a plan to follow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Architectus Oryzus&lt;/em&gt; is a different kind of animal. This kind of architect must be very aware of what’s going on in the project, looking out for important issues and tackling them before they become a serious problem. When I see an architect like this, the most noticeable part of the work is the intense collaboration. In the morning, the architect programs with a developer, trying to harvest some common locking code. In the afternoon, the architect participates in a requirements session, helping explain to the requirements people the technical consequences of some of their ideas in non-technical terms — such as development costs.&lt;/p&gt;

&lt;p&gt;In many ways, the most important activity of &lt;em&gt;Architectus Oryzus&lt;/em&gt; is to mentor the development team, to raise their level so that they can take on more complex issues. Improving the development team’s ability gives an architect much greater leverage than being the sole decision maker and thus running the risk of being an architectural bottleneck. This leads to the satisfying rule of thumb that an architect’s value is inversely proportional to the number of decisions he or she makes.&lt;/p&gt;

&lt;p&gt;-Martin Fowler in &lt;a href=&#34;http://www.in-gmbh.eu/uploads/media/whoNeedsArchitect.pdf&#34;&gt;Who Needs An Architect?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that summarizes very well the role I played for my previous company. Without the benefit of the article&amp;rsquo;s description, I intuitively approached architecture in this way. It&amp;rsquo;s always been clear to me that collaboration is the key to a better product. That means always looking for feedback on designs (earlier the better), and being open to better ideas (often bubbling from the bottom up, sometimes from unexpected places). Raising the level of the development team is crucial, to both increase the pool of critical thinkers available for each problem (huge win), while also reducing the incidence of &amp;ldquo;misguided&amp;rdquo; code submissions (which can become dangerous precedents for future development if left unchecked). There is so much opportunity to learn in both directions.&lt;/p&gt;

&lt;p&gt;Ultimately, looking back on my experience now, if I can be critical in one area, it&amp;rsquo;s that I probably got a bit too involved with the teams at times, leading to over-reliance. I&amp;rsquo;m thinking in particular of the moments when I was overseeing three scrum teams. Teams came to rely on me to do reviews, especially code reviews. Even after raising their level and mentoring them to the point that they were capable of self-organizing and taking on that role themselves, I did not notice anyone rise up to truly champion the cause*. Partly I think, that&amp;rsquo;s because I was performing that role so consistently. Too consistently perhaps. Hence there may be a lesson here about stepping back when the time is right.&lt;/p&gt;

&lt;p&gt;*(At least, the team structures never lasted long enough to see if any champions would finally emerge. I do hope they have gone on to be leaders on their future teams).&lt;/p&gt;

&lt;p&gt;In the end, it was a very rewarding experience with my previous company, and I&amp;rsquo;m looking forward to the new challenges ahead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WeAllProfit.ca Launched!</title>
      <link>https://cadams.ca/blog/post/2016/12/13/weallprofit.ca-launched/</link>
      <pubDate>Tue, 13 Dec 2016 07:03:15 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/12/13/weallprofit.ca-launched/</guid>
      <description>&lt;p&gt;A website I have been helping to build for &lt;a href=&#34;http://csedottawa.ca/&#34;&gt;CSED&lt;/a&gt; has officially launched!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://WeAllProfit.ca&#34;&gt;WeAllProfit.ca&lt;/a&gt; is a directory of social enterprises in Ottawa. A &lt;em&gt;social enterprise&lt;/em&gt; is a venture which has a  mission that goes beyond profit. This can mean offering employment to vulnerable or disabled people, protecting the environment, or passing their profits on to a charitable organization. Check out the &lt;a href=&#34;https://WeAllProfit.ca&#34;&gt;website&lt;/a&gt; for many examples of social enterprises in Ottawa.&lt;/p&gt;

&lt;p&gt;This website will serve customers of the social enterprise sector by gathering all the local enterprises listings in one place, where a potential customer such as yourself can discover and browse the offerings. We hope this will inspire you to shop in the social enterprise sector, and we are looking forward to adding many more enterprises as we go!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration Testing with Node and Mongo</title>
      <link>https://cadams.ca/blog/post/2016/10/14/integration-testing-with-node-and-mongo/</link>
      <pubDate>Fri, 14 Oct 2016 22:31:54 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/10/14/integration-testing-with-node-and-mongo/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been building &lt;a href=&#34;https://github.com/cised-ca/social-enterprise-directory&#34;&gt;an application&lt;/a&gt; using Node.js with a MongoDB datastore. Now I want to perform some integration testing (&lt;em&gt;without&lt;/em&gt; mocking the DB layer) to ensure full end-to-end success of the application. Here&amp;rsquo;s how I went about doing this.&lt;/p&gt;

&lt;h1 id=&#34;using-a-test-database:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Using a test database&lt;/h1&gt;

&lt;p&gt;While the goal is to execute code paths that go through Mongo, it will still be acceptable to execute against a different db than the one used for production deployments. This will ensure the test data never ends up in production by accident, and also avoids production data getting deleted by accident.&lt;/p&gt;

&lt;p&gt;Hence, I&amp;rsquo;ll have the application connect to Mongo using a test connection string. This will be specified in a configuration file with suitable default value.&lt;/p&gt;

&lt;p&gt;Since the application creates the db collections on start up, there are no further pre-requisite Mongo commands to setup the test database.&lt;/p&gt;

&lt;h1 id=&#34;starting-the-application:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Starting the application&lt;/h1&gt;

&lt;p&gt;Before any tests can run, the application needs to start up. So I wrote a simple &lt;code&gt;app_starter.js&lt;/code&gt; utility to boot the application into service with the appropriate test configuration.&lt;/p&gt;

&lt;h1 id=&#34;starting-each-test-with-a-clean-datastore:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Starting each test with a clean datastore&lt;/h1&gt;

&lt;p&gt;Each test needs to be independent, so we can&amp;rsquo;t leave remnants in the datastore from a previous test. Hence the first thing I do at the start of each test is clean the database.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using Mocha as my test framework, so this gets implemented as a &lt;code&gt;beforeEach&lt;/code&gt; hook:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;beforeEach( function(done) {
    dbUtil.cleanDatabase(done);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;cleaning-the-datastore:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Cleaning the datastore&lt;/h1&gt;

&lt;p&gt;One very straightforward way to clean the datastore, is to drop the database and re-create it again. My application connects to the datastore using &lt;a href=&#34;mongoosejs.com&#34;&gt;Mongoose&lt;/a&gt;. With Mongoose, the database can be dropped with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function cleanDatabase(done) {
  mongoose.connection.db.dropDatabase(done);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was easy.&lt;/p&gt;

&lt;p&gt;Now how do we re-create the database? Turns out Mongoose is kind enough to do this for you automatically under the hood, so nothing else to do. However there&amp;rsquo;s one more wrinkle to deal with&amp;hellip;&lt;/p&gt;

&lt;p&gt;Mongoose will re-create the collections in the database on demand, but not the indexes. The indexes are only built during mongoose connection establishment. This means our tests won&amp;rsquo;t be able to execute successfully because the database indexes won&amp;rsquo;t be present. Let&amp;rsquo;s look at how to address that.&lt;/p&gt;

&lt;h1 id=&#34;rebuilding-the-indexes:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Rebuilding the indexes&lt;/h1&gt;

&lt;p&gt;Luckily Mongoose supplies an API to rebuild the indexes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongoose.model(modelName).ensureIndexes();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This takes a little time to complete, so I had to register on &lt;code&gt;index&lt;/code&gt; event to listen for when it finishes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongoose.model(myModel).on(&#39;index&#39;, done);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the indexes are ready, the database is set for your test to begin. Here is the updated &lt;code&gt;cleanDatabase&lt;/code&gt; function which delegates to a rebuildIndexes helper function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function cleanDatabase(done) {
  mongoose.connection.db.dropDatabase( function() {
    rebuildIndexes(done);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may find the full implementation &lt;a href=&#34;https://github.com/cised-ca/social-enterprise-directory/blob/dd0c588843ffe014b0befd36e316beefa6bc181b/test/api/helpers/db/db_util.js&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;results:6648ac7d9852b157cbf2d7b2e6ff1536&#34;&gt;Results&lt;/h1&gt;

&lt;p&gt;That puts a simple automated integration test framework in place for application developers to work with. This should help ensure stability of the application over time as new features get added, while also allowing developers to take a TDD approach to feature development.&lt;/p&gt;

&lt;p&gt;On my system it does take a few 100 ms to run each test due to the extra database overhead. Given the number of tests at the moment, this is not a concern. In the future if it somehow grows into a problem there are alternatives to dropping the database, such as removing the collections, which I&amp;rsquo;ve heard may improve execution performance. This would be easy to refactor in the future if needed, but I expect the current implementation will be just fine for a long while.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Hacks of Kindness 2016</title>
      <link>https://cadams.ca/blog/post/2016/06/25/random-hacks-of-kindness-2016/</link>
      <pubDate>Sat, 25 Jun 2016 21:28:00 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/06/25/random-hacks-of-kindness-2016/</guid>
      <description>&lt;p&gt;This past weekend I participated in a hackathon for &lt;a href=&#34;http://rhok.ca/&#34;&gt;Random Hacks of Kindness&lt;/a&gt; where the goal is to support community organizations with tech solutions.&lt;/p&gt;

&lt;p&gt;I joined the project for the Centre for Social Enterprise Development (&lt;a href=&#34;http://www.cised.ca/&#34;&gt;CISED&lt;/a&gt;). A &lt;em&gt;social enterprise&lt;/em&gt; is a venture whose purpose is to achieve a social mission. There are about 150 social enterprises in Ottawa, which includes ventures such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ReStore - accepts donated home products then refurbishes and resells them in their retail stores with all proceeds going to Habitat for Humanity&lt;/li&gt;
&lt;li&gt;Laundry Matters - employees with developmental disabilities provide residential and commercial laundry services&lt;/li&gt;
&lt;li&gt;Good Nature Groundskeeping:  provides professional landscape maintenance services while also providing employment to people who are economically disadvantaged&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The challenge for CISED is to grow the social enterprise sector. While there is increasing awareness about social enterprises and a willingness on the purchasing side to procure their services, currently the main challenges are the lack of awareness of what services are available (for example I had only heard of about 3 of the 150 companies myself), and the ability to connect the buyers with the sellers.&lt;/p&gt;

&lt;p&gt;The hackathon began with an energizing discussion with the stakeholders from CISED about how to connect purchasers and suppliers in an online marketplace. We went into details such as the three main types of purchasers involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Large business procurement (government or companies looking to support social enterprises, perhaps to meet internal procurement targets)&lt;/li&gt;
&lt;li&gt;Small to medium independent business owners (perhaps looking to reinforce their brands or support the community)&lt;/li&gt;
&lt;li&gt;The general public (people like you and me who would like to have their snow cleared all the while knowing the proceeds will support people in need in the community)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While CISED felt that the large procurers would be the most important clients to focus on as it would be the best shot at growing the social enterprise sector, the use cases involved with these purchasers were rather complex, such as dealing with scenarios where demand outstrips supply. Since social enterprises often have limited resources, if an order came in from a big client, such as a catering order, it might require two different catering companies to satisfy. It would be rather involved to support this kind of order on an online system, but could perhaps be achieved by allowing buyers to post RFPs or a similar concept (kind of like wanted ads on kijiji).&lt;/p&gt;

&lt;p&gt;At the end of the day, we knew we could not build an online marketplace in 24 hours. However, there was something we could do to further the cause for all types of purchasers: build an online directory of social enterprises in Ottawa. This would satisfy an immediate need, as CISED often gets asked about what services are on offer, and currently this info is only available in a spreadsheet.&lt;/p&gt;

&lt;p&gt;The goals of the directory would be online, public, fully searchable, and managed by CISED. New enterprises would apply to CISED for inclusion, and get vetted before being accepted. The directory would replace the current spreadsheet tracking system.&lt;/p&gt;

&lt;p&gt;With this in mind, we decided that Wordpress was a good technology choice for this problem. A CMS system would allow CISED to manage the list of social enterprises on an ongoing basis with minimal technical expertise required. Plugins could be used to import and export the database as needed. We could deliver the solution in 24 hours in a state that was actually useful.&lt;/p&gt;

&lt;p&gt;The delivered code is available at &lt;a href=&#34;https://github.com/rhok2016-cised/cised-directory&#34;&gt;https://github.com/rhok2016-cised/cised-directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope that CISED will find this useful!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with Hugo Templates</title>
      <link>https://cadams.ca/blog/post/2016/06/04/working-with-hugo-templates/</link>
      <pubDate>Sat, 04 Jun 2016 10:53:47 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/06/04/working-with-hugo-templates/</guid>
      <description>

&lt;p&gt;Hugo uses templates to generate HTML pages. This lets you control your generated HTML content with the help of simple logic. For example, logic such as ranging over all blog posts so that you can print them one at a time onto the page. Hugo uses the &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;Go html/template&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;A template can describe an entire page, or just a small portion of a page (for example, just the copyright notice, the header, the footer, etc.). When this happens it is called a &lt;em&gt;partial template&lt;/em&gt;, and that template can be reused just about anywhere else in your website.  Partials are especially useful in Hugo themes, as it gives you the option to override just a small part of the layout to suit your needs. As mentioned in my &lt;a href=&#34;https://cadams.ca/blog/post/2016/05/29/customizing-hugo-themes/&#34;&gt;previous post&lt;/a&gt;, overriding any file in a theme is as simple as dropping in your own version of the file with the same name. Thus templates can be overriden the same way.&lt;/p&gt;

&lt;h1 id=&#34;modifying-the-hyde-x-theme:aca756b519d0e7970786722619fbfdb0&#34;&gt;Modifying the Hyde-X theme&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;Hyde-X&lt;/a&gt; theme by default provides nice looking links at the top of each post, based on the post&amp;rsquo;s meta content (such as the links marked &amp;ldquo;hugo&amp;rdquo; and &amp;ldquo;blog&amp;rdquo; which you can see at the top of this post). However, Hyde-X only supports those links for &lt;em&gt;categories&lt;/em&gt;, and I wanted links for &lt;em&gt;tags&lt;/em&gt;, which are two different meta data taxonomies.&lt;/p&gt;

&lt;p&gt;This brought me to my first encounter with Hugo templating.&lt;/p&gt;

&lt;p&gt;To solve this, first I extracted the links section into its own partial template, where it could be customized independently from the rest of the theme. Then I made a configuration item to control which taxonomies to create links for.&lt;/p&gt;

&lt;p&gt;Here are some of the quirks I encountered along the way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Appending strings&lt;/em&gt;. The Hugo template language has limited support for many of the features available in Go. I needed to append the &lt;code&gt;/&lt;/code&gt; character to a variable, but there is no append function. Turns out this can be done with &lt;a href=&#34;https://discuss.gohugo.io/t/concatenating-strings-with-print/711&#34;&gt;print function&lt;/a&gt;: &lt;code&gt;(print $itemToLink &amp;quot;/&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Passing values to partial templates&lt;/em&gt;. After generating the links, the theme either needs to print a newline following the links (in case of blog post), or else print a dot separator (in case of list view, as seen when you click on one of the tag links). Hence I wanted to give a parameter to my partial template to specify how to handle the separator. Solution: this can be achieved by &lt;a href=&#34;http://gohugo.io/templates/functions#dict&#34;&gt;passing a map into a partial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Variable scope&lt;/em&gt;. I needed a way to check if a post had any links to display, and so I wanted to store this in a flag variable. However, ranging over a collection creates a new scope and so all modifications to variables within (such as the flag) are lost outside this scope. The solution was to use Hugo&amp;rsquo;s &lt;a href=&#34;https://gohugo.io/extras/scratch/&#34;&gt;Scratch&lt;/a&gt; feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;contributing-back:aca756b519d0e7970786722619fbfdb0&#34;&gt;Contributing back&lt;/h1&gt;

&lt;p&gt;Instead of overriding the theme just on my own personal website, I thought this feature could be generally useful to others who are using the theme. So I made a &lt;a href=&#34;https://github.com/zyro/hyde-x/pull/65&#34;&gt;pull request&lt;/a&gt; to contribute this back to the community.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customizing Hugo Themes</title>
      <link>https://cadams.ca/blog/post/2016/05/29/customizing-hugo-themes/</link>
      <pubDate>Sun, 29 May 2016 15:46:05 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/05/29/customizing-hugo-themes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; has a straight forward yet powerful strategy for theming websites.&lt;/p&gt;

&lt;p&gt;The first step is to &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;choose a theme&lt;/a&gt; to use, as your baseline. In an &lt;a href=&#34;https://cadams.ca/blog/post/2016/05/24/getting-started-with-hugo/&#34;&gt;earlier post&lt;/a&gt;, I mentioned that I picked &lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;Hyde-X&lt;/a&gt; for this website. I liked the general design of Hyde but wanted the extra features provided by Hyde-X such as pagination.&lt;/p&gt;

&lt;p&gt;At this point your website will take on the default appearance of the theme. Most themes will also support some kind of configuration parameters out of the box, so this is usually the first step towards customization. For example, Hyde-X lets you configure your social media links, what syntax highlighting to use, and how you want your content paginated.&lt;/p&gt;

&lt;p&gt;At some point you might want to tweak your website in a way that is not directly configurable through the theme. This is normal and expected, since everyone has unique needs for their sites.&lt;/p&gt;

&lt;p&gt;Fortunately Hugo has a general convention for &lt;a href=&#34;https://gohugo.io/themes/customizing/&#34;&gt;overriding themes&lt;/a&gt;. Hugo lets you supplement or override any template or static file (which includes stuff like CSS, etc). Hence when you customize a theme, you don&amp;rsquo;t edit the theme&amp;rsquo;s files directly. Rather, you supply your own versions of those files, which then take precendence over that of the theme.&lt;/p&gt;

&lt;p&gt;One simple example is the favicon. I simply dropped my custom icon into&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static/favicon.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that takes precendence over the theme&amp;rsquo;s file of the same name.&lt;/p&gt;

&lt;p&gt;In my next post I will go a bit further into more complex customizations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting a Hugo site on GitHub Pages</title>
      <link>https://cadams.ca/blog/post/2016/05/26/hosting-a-hugo-site-on-github-pages/</link>
      <pubDate>Thu, 26 May 2016 11:57:11 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/05/26/hosting-a-hugo-site-on-github-pages/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;https://cadams.ca/blog/post/2016/05/24/getting-started-with-hugo/&#34;&gt;previous post&lt;/a&gt;, I created a static website using Hugo. This article explains how to host such a site for free, using GitHub Pages.&lt;/p&gt;

&lt;h1 id=&#34;github-pages:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;GitHub Pages&lt;/h1&gt;

&lt;p&gt;GitHub Pages is a website hosting service provided by GitHub. If you are willing to publish your website in a git repository on GitHub then GitHub Pages will serve your website for free.&lt;/p&gt;

&lt;p&gt;The requirements are that your github repo must be named &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; and the repo should contain an index.html file.&lt;/p&gt;

&lt;h1 id=&#34;github-pages-and-hugo:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;GitHub Pages and Hugo&lt;/h1&gt;

&lt;p&gt;As mentioned in my &lt;a href=&#34;https://cadams.ca/blog/post/2016/05/24/getting-started-with-hugo/&#34;&gt;previous post&lt;/a&gt; Hugo generates a &lt;code&gt;public/&lt;/code&gt; directory with the full contents of the website. In order to host that on GitHub Pages, we&amp;rsquo;ll simply need to put the contents of the &lt;code&gt;public/&lt;/code&gt; folder in an appropriately named github repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams.github.io&#34;&gt;chad-g-adams.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a few minutes, the website will be live at &lt;a href=&#34;http://chad-g-adams.github.io/&#34;&gt;http://chad-g-adams.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;syncing-hugo-content-with-github-pages:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;Syncing Hugo content with GitHub Pages&lt;/h1&gt;

&lt;p&gt;Now we have two git repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One for holding the website content: &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams-hugo&#34;&gt;chad-g-adams-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And one for holding the actual generated website which is used for hosting: &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams.github.io&#34;&gt;chad-g-adams.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue is, when I make changes to my site content (by working in the first repo), I would like to see those changes applied to second repo so that it can take effect on &lt;a href=&#34;http://chad-g-adams.github.io/&#34;&gt;http://chad-g-adams.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While inside my first repository, when I generate my website using command &lt;code&gt;hugo serve&lt;/code&gt;a folder called &lt;code&gt;public/&lt;/code&gt; is generated in the working directory. Wouldn&amp;rsquo;t it be great if that folder could be automatically part of the second git repo? In other words, having one git repo inside of another?&lt;/p&gt;

&lt;p&gt;This can be accomplished in different ways. Probably the simplest way is to add &lt;code&gt;public/&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt; of the parent repo, and then clone the child repo separately into that directory.&lt;/p&gt;

&lt;p&gt;Another way is to use &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;git submodules&lt;/a&gt;. This allows you to keep a git repository as a subdirectory of another git repository. The advantage is that when you run &lt;code&gt;git status&lt;/code&gt; in the parent repo it will now also summarize the status of the child repo to remind you if there are outstanding changes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modified:   public/ (new commits, modified content)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Either way, Hugo will now generate the site content directly into the second repo where it can then be easily committed and pushed.&lt;/p&gt;

&lt;h2 id=&#34;a-note-on-hugo-generation:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;A note on Hugo generation&lt;/h2&gt;

&lt;p&gt;Hugo assumes the &lt;code&gt;public/&lt;/code&gt; directory is empty when it generates the content. For that reason you should clean out the directory before re-generation or you risk deleted posts/pages living on.&lt;/p&gt;

&lt;h1 id=&#34;automating-the-deploy-steps:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;Automating the Deploy Steps&lt;/h1&gt;

&lt;p&gt;In order to automate the various steps required to deploy my website, I created a simple script &lt;code&gt;deploy.sh&lt;/code&gt; to run all the steps in one shot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/sh

# clean any old website data
rm -r public/*

# generate new website data
hugo

# commit and push the new content
cd public
git add -A
git commit -m &amp;quot;website update&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Hugo</title>
      <link>https://cadams.ca/blog/post/2016/05/24/getting-started-with-hugo/</link>
      <pubDate>Tue, 24 May 2016 09:27:14 -0400</pubDate>
      
      <guid>https://cadams.ca/blog/post/2016/05/24/getting-started-with-hugo/</guid>
      <description>

&lt;h1 id=&#34;overview:86024dcf7244259db6089302c01d25e4&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Setting up a website these days can be done at no cost other than a bit of time. I thought it would be interesting to spend a weekend playing around with some of the available tools. This article covers how I set up my site, using &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; to generate my content, and &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; to host.&lt;/p&gt;

&lt;h1 id=&#34;hugo:86024dcf7244259db6089302c01d25e4&#34;&gt;Hugo&lt;/h1&gt;

&lt;p&gt;For simple sites, such as blogs, there are good reasons to prefer static site generators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Better security&lt;/strong&gt;: everything becomes simple static content so it significantly limits the areas of exposure to hackers; there are no logins, passwords, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: the site will load quickly and be responsive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline editing&lt;/strong&gt;: I can continue to create content when I&amp;rsquo;m offline, although that is becoming less and less of an issue these days&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; is a static site generator written in Go. I chose Hugo because it was open source with an active community, and because I also have an interest in learning the Go language (not that you need worry about that when building your website with Hugo).&lt;/p&gt;

&lt;h1 id=&#34;hugo-workflow:86024dcf7244259db6089302c01d25e4&#34;&gt;Hugo Workflow&lt;/h1&gt;

&lt;p&gt;Using Hugo was an absolute pleasure. There are &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;good tutorials&lt;/a&gt; on Hugo available, so I will just cover some of the highlights here to demonstrate how easy it is.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-new-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Creating a new site&lt;/h2&gt;

&lt;p&gt;One simple command will create you a new site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site mySiteName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a new folder called &lt;code&gt;mySiteName/&lt;/code&gt; and bootstrap it with the required directory structure.&lt;/p&gt;

&lt;h2 id=&#34;create-new-content:86024dcf7244259db6089302c01d25e4&#34;&gt;Create new content&lt;/h2&gt;

&lt;p&gt;Creating a new post is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/my-post-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The post file &lt;code&gt;my-post-name.md&lt;/code&gt; appears in the &lt;code&gt;mySiteName/content/post/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The basic premise of Hugo is that your content is organized in a specific way on purpose. Hence the filesystem organization of your content matches the URL at which it is hosted. For example content file at &lt;code&gt;content/foo/bar/myFirstPost.md&lt;/code&gt; will be hosted at &lt;code&gt;&amp;lt;site&amp;gt;/foo/bar/myFirstPost&lt;/code&gt; (By default - however that is fully configurable).&lt;/p&gt;

&lt;h2 id=&#34;editing-content:86024dcf7244259db6089302c01d25e4&#34;&gt;Editing content&lt;/h2&gt;

&lt;p&gt;Post content is generally a plain text file (which means I am writing everything in vim, hooray!). Hugo has native support for &lt;a href=&#34;http://daringfireball.net/projects/markdown/basics&#34;&gt;Markdown&lt;/a&gt; language.&lt;/p&gt;

&lt;p&gt;Every content file begins with a section of metadata that allows you to specify information about the content, like the title, date, tags, or any arbitrary data you would use to classify your content.&lt;/p&gt;

&lt;h2 id=&#34;pick-a-theme:86024dcf7244259db6089302c01d25e4&#34;&gt;Pick a Theme&lt;/h2&gt;

&lt;p&gt;Next you pick a theme for your site. I used &lt;strong&gt;&lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;hyde-x&lt;/a&gt;&lt;/strong&gt;, with a few tweaks (more to come on that in a later post).&lt;/p&gt;

&lt;h2 id=&#34;preview-your-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Preview Your Site&lt;/h2&gt;

&lt;p&gt;Alright, we have some content now, let&amp;rsquo;s test it out. Hugo comes with a built-in HTTP server. Launch the server with a simple command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And connect a browser to the endpoint to view your site. Boom!&lt;/p&gt;

&lt;p&gt;Could it be any easier?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool feature: your browser &lt;em&gt;automatically updates instantly&lt;/em&gt; as you edit your site&amp;rsquo;s content! This makes your web development cycle a very tight loop.&lt;/p&gt;

&lt;h2 id=&#34;publish-your-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Publish Your Site&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;re satisfied with your site, it&amp;rsquo;s time to publish. Running the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generates a folder &lt;code&gt;public/&lt;/code&gt; with all the static HTML, CSS, etc needed for your site.  That folder can then be dropped onto a web server, or hosted by an external service (such as GitHub Pages - I will be going into that in &lt;a href=&#34;https://cadams.ca/blog/post/2016/05/26/hosting-a-hugo-site-on-github-pages/&#34;&gt;my next post&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;my-hugo-content:86024dcf7244259db6089302c01d25e4&#34;&gt;My Hugo Content&lt;/h1&gt;

&lt;p&gt;For reference, the Hugo code for this website can be found on my github repo &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams-hugo&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>