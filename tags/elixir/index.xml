<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixir on Chad Adams</title>
    <link>https://cadams.ca/blog/tags/elixir/</link>
    <description>Recent content in Elixir on Chad Adams</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Chad Adams</copyright>
    <lastBuildDate>Tue, 12 Feb 2019 13:20:22 -0500</lastBuildDate>
    <atom:link href="https://cadams.ca/blog/tags/elixir/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Advent of Code 2018</title>
      <link>https://cadams.ca/blog/post/2019/02/12/advent-of-code-2018/</link>
      <pubDate>Tue, 12 Feb 2019 13:20:22 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2019/02/12/advent-of-code-2018/</guid>
      <description>

&lt;p&gt;This past December I discovered the &lt;strong&gt;&lt;a href=&#34;https://adventofcode.com/2018&#34;&gt;Advent of Code&lt;/a&gt;&lt;/strong&gt; challenge, in which you get a different coding puzzle for each day in December leading up to Christmas. The puzzles can be solved in any programming language of your choice.&lt;/p&gt;

&lt;p&gt;I decided to solve the puzzles in Elixir, which is a newer language that I am starting to use at work. The creator of Elixir, José Valim, was solving the puzzles as well and &lt;a href=&#34;http://blog.plataformatec.com.br/2018/11/lets-learn-elixir-together-with-advent-of-code/&#34;&gt;live streaming his solutions&lt;/a&gt;. Other Elixir experts were also publishing solutions, such as &lt;a href=&#34;https://github.com/sasa1977/aoc&#34;&gt;Saša Jurić&lt;/a&gt;. This was so cool! A fabulous way to learn a new language.&lt;/p&gt;

&lt;p&gt;Due to time constraints I only attempted about half of the puzzles with my &lt;a href=&#34;https://github.com/chad-g-adams/advent-of-code-2018&#34;&gt;solutions posted here&lt;/a&gt;. I was hoping to go back and finish the rest of the puzzles but that hasn&amp;rsquo;t happened so I&amp;rsquo;m wrapping this up with a blog post now.&lt;/p&gt;

&lt;h2 id=&#34;commentary:0647481dad1b7f4b21d4a5bad3077cd7&#34;&gt;Commentary&lt;/h2&gt;

&lt;p&gt;Partway through I realized it would be helpful to myself to capture personal insights for each solution, so I left some commentary in the code solutions themselves which I am reproducing here:&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;

&lt;td style=&#34;width: 20%&#34;&gt;
Day 5 
&lt;/td&gt;
&lt;td&gt;
&lt;sub&gt;
    For this solution, I found that converting each individual character to a String for purpose of doing downcase() 
    was performance impacting (total 30 seconds to solve puzzle). So I switched to using assumption
    that input was only ascii letters (and added a validation check to ensure this assumption holds). 
    Thus I could compare upper/lower case by adding 32 to the value instead of converting to string. Solution runs 15x faster.
    &lt;/sub&gt;
&lt;/td&gt;

&lt;tr&gt;
&lt;td&gt;
Day 6
&lt;/td&gt;

&lt;td&gt;
&lt;sub&gt;
The performance of my solution is lacking, it took 30 seconds to solve Part 1 on my laptop.
Part 2 solution was even worse - 2 min 26 s.
If I had more time I would go back and optimize!
&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Day 7
&lt;/td&gt;
&lt;td&gt;
&lt;sub&gt;
    First part was OK, second part took a long time to solve.
    First puzzle where my code worked for the test data but didn&#39;t work for the full solution.
    (Turned out I read the challenge wrong.. was using wrong number of workers).
    Passing a lot of parameters around. Might be easier to pass state around as a
    single map structure than as individual parameters.
    
&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
 Day 8
&lt;/td&gt;
&lt;td&gt;

&lt;sub&gt;
    Got bitten by elixir when doing efficient building a list by appending to the start
    but then forgetting to reverse list at the end (when order became important)!
    This caused some grief. I could have noticed this error sooner if I ran the tests more frequently
    during development.

&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Day 9
&lt;/td&gt;
&lt;td&gt;

&lt;sub&gt;
    Nice to use Stream.unfold for the first time, also learned how to sleep in elixir.

&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Day 10
&lt;/td&gt;
&lt;td&gt;

&lt;sub&gt;
    Things I learned today, you can do pattern matching in anonymous functions!
    Part 1 was solved in a straightforward, albeit not great performance way.
    Part 2 The non-performant solution was no longer reasonable. I tried a few
     optimizations but couldn&#39;t make it fast enough. Then I found this hint:
     https://en.wikipedia.org/wiki/Summed-area_table
     but by that point it was the end of the night and I didn&#39;t feel like implementing it.

&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Day 18
&lt;/td&gt;
&lt;td&gt;

&lt;sub&gt;
  Felt really good about solving this one, my growing familiarity with the elixir
  modules is starting to pay off. Assist to my wife for talking through Part 2 strategy with me.
  
&lt;/sub&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Visual Studio Code for Elixir</title>
      <link>https://cadams.ca/blog/post/2018/12/31/setting-up-visual-studio-code-for-elixir/</link>
      <pubDate>Mon, 31 Dec 2018 13:50:44 -0500</pubDate>
      
      <guid>https://cadams.ca/blog/post/2018/12/31/setting-up-visual-studio-code-for-elixir/</guid>
      <description>

&lt;p&gt;Elixir is a programming language that I am in the process of learning, and which I use at work. This post documents the settings I am using to develop in elixir using the VSCode editor.&lt;/p&gt;

&lt;h2 id=&#34;1-language-support:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;1. Language Support&lt;/h2&gt;

&lt;p&gt;Install extension &lt;code&gt;ElixirLS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Out of the box this gives you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;autocomplete, navigation, dialyzer (aka static analysis/linting) and debugging capabilities. Hooray!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-formatting:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;2. Formatting&lt;/h2&gt;

&lt;p&gt;Elixir is an auto-formatted language for &lt;a href=&#34;https://hashrocket.com/blog/posts/format-your-elixir-code-now&#34;&gt;reasons&lt;/a&gt;, hence &lt;code&gt;mix format&lt;/code&gt; is your friend. In your VSCode Settings, hit the checkbox for &amp;ldquo;Editor: Format on Save&amp;rdquo; to run this on every save.&lt;/p&gt;

&lt;h2 id=&#34;3-test-execution:59fcf391e193ccd025a67f034b3ef13d&#34;&gt;3. Test Execution&lt;/h2&gt;

&lt;p&gt;I commonly run tests three different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run a single test. Most frequently used while developing.&lt;/li&gt;
&lt;li&gt;Run &lt;em&gt;all&lt;/em&gt; the tests. Used for regression testing.&lt;/li&gt;
&lt;li&gt;Run all the tests from a single file. Sometimes useful while developing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set these up as Tasks in your tasks.json as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {
      &amp;quot;label&amp;quot;: &amp;quot;mix test&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      }
  },
  {
      &amp;quot;label&amp;quot;: &amp;quot;single test&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test ${relativeFile}:${lineNumber}&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      },
      &amp;quot;runOptions&amp;quot;: {
          &amp;quot;reevaluateOnRerun&amp;quot;: false
      }
  },
  {
      &amp;quot;label&amp;quot;: &amp;quot;test current file&amp;quot;,
      &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
      &amp;quot;command&amp;quot;: &amp;quot;mix test ${relativeFile}&amp;quot;,
      &amp;quot;group&amp;quot;: &amp;quot;test&amp;quot;,
      &amp;quot;presentation&amp;quot;: {
          &amp;quot;echo&amp;quot;: true,
          &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
          &amp;quot;focus&amp;quot;: false,
          &amp;quot;panel&amp;quot;: &amp;quot;shared&amp;quot;,
          &amp;quot;clear&amp;quot;: true
      },
      &amp;quot;runOptions&amp;quot;: {
          &amp;quot;reevaluateOnRerun&amp;quot;: false
      }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also create hotkeys to launch your tests. I do it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;key&amp;quot;: &amp;quot;ctrl-s&amp;quot;,
  &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
  &amp;quot;args&amp;quot;: &amp;quot;mix test&amp;quot;
},
{
  &amp;quot;key&amp;quot;: &amp;quot;ctrl+shift+s&amp;quot;,
  &amp;quot;command&amp;quot;: &amp;quot;workbench.action.tasks.runTask&amp;quot;,
  &amp;quot;args&amp;quot;: &amp;quot;single test&amp;quot;,
  &amp;quot;when&amp;quot;: &amp;quot;editorTextFocus&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s super easy to run a single test, or all the tests, on a whim.&lt;/p&gt;

&lt;p&gt;Use in combination with the standard &amp;ldquo;Rerun Last Task&amp;rdquo; (new in vscode 1.30) to run your single test over and over again without having to switch windows.&lt;/p&gt;

&lt;p&gt;With credit to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pragdave.me/blog/2018/06/13/visual-studio-code-elixir-tests.html&#34;&gt;https://pragdave.me/blog/2018/06/13/visual-studio-code-elixir-tests.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>