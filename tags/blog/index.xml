<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Chad Adams</title>
    <link>http://chad-g-adams.github.io/tags/blog/</link>
    <description>Recent content in Blog on Chad Adams</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Chad Adams</copyright>
    <lastBuildDate>Thu, 26 May 2016 11:57:11 -0400</lastBuildDate>
    <atom:link href="http://chad-g-adams.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hosting a Hugo site on GitHub Pages</title>
      <link>http://chad-g-adams.github.io/post/2016/05/26/hosting-a-hugo-site-on-github-pages/</link>
      <pubDate>Thu, 26 May 2016 11:57:11 -0400</pubDate>
      
      <guid>http://chad-g-adams.github.io/post/2016/05/26/hosting-a-hugo-site-on-github-pages/</guid>
      <description>

&lt;p&gt;In my &lt;a href=&#34;http://chad-g-adams.github.io/post/2016/05/24/getting-started-with-hugo/&#34;&gt;previous post&lt;/a&gt;, I created a static website using Hugo. This article explains how to host such a site for free, using GitHub Pages.&lt;/p&gt;

&lt;h1 id=&#34;github-pages:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;GitHub Pages&lt;/h1&gt;

&lt;p&gt;GitHub Pages is a website hosting service provided by GitHub. If you are willing to publish your website in a git repository on GitHub then GitHub Pages will serve your website for free.&lt;/p&gt;

&lt;p&gt;The requirements are that your github repo must be named &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; and the repo should contain an index.html file.&lt;/p&gt;

&lt;h1 id=&#34;github-pages-and-hugo:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;GitHub Pages and Hugo&lt;/h1&gt;

&lt;p&gt;As mentioned in my &lt;a href=&#34;http://chad-g-adams.github.io/post/2016/05/24/getting-started-with-hugo/&#34;&gt;previous post&lt;/a&gt; Hugo generates a &lt;code&gt;public/&lt;/code&gt; directory with the full contents of the website. In order to host that on GitHub Pages, we&amp;rsquo;ll simply need to put the contents of the &lt;code&gt;public/&lt;/code&gt; folder in an appropriately named github repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams.github.io&#34;&gt;chad-g-adams.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a few minutes, the website will be live at &lt;a href=&#34;http://chad-g-adams.github.io/&#34;&gt;http://chad-g-adams.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;syncing-hugo-content-with-github-pages:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;Syncing Hugo content with GitHub Pages&lt;/h1&gt;

&lt;p&gt;Now we have two git repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One for holding the website content: &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams-hugo&#34;&gt;chad-g-adams-hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And one for holding the actual generated website which is used for hosting: &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams.github.io&#34;&gt;chad-g-adams.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue is, when I make changes to my site content (by working in the first repo), I would like to see those changes applied to second repo so that it can take effect on &lt;a href=&#34;http://chad-g-adams.github.io/&#34;&gt;http://chad-g-adams.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While inside my first repository, when I generate my website using command &lt;code&gt;hugo serve&lt;/code&gt;a folder called &lt;code&gt;public/&lt;/code&gt; is generated in the working directory. Wouldn&amp;rsquo;t it be great if that folder could be automatically part of the second git repo? In other words, having one git repo inside of another?&lt;/p&gt;

&lt;p&gt;This can be accomplished in different ways. Probably the simplest way is to add &lt;code&gt;public/&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt; of the parent repo, and then clone the child repo separately into that directory.&lt;/p&gt;

&lt;p&gt;Another way is to use &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;git submodules&lt;/a&gt;. This allows you to keep a git repository as a subdirectory of another git repository. The advantage is that when you run &lt;code&gt;git status&lt;/code&gt; in the parent repo it will now also summarize the status of the child repo to remind you if there are outstanding changes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modified:   public/ (new commits, modified content)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Either way, Hugo will now generate the site content directly into the second repo where it can then be easily committed and pushed.&lt;/p&gt;

&lt;h2 id=&#34;a-note-on-hugo-generation:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;A note on Hugo generation&lt;/h2&gt;

&lt;p&gt;Hugo assumes the &lt;code&gt;public/&lt;/code&gt; directory is empty when it generates the content. For that reason you should clean out the directory before re-generation or you risk deleted posts/pages living on.&lt;/p&gt;

&lt;h1 id=&#34;automating-the-deploy-steps:880a44ed049d0dd561a1cb819f7c9037&#34;&gt;Automating the Deploy Steps&lt;/h1&gt;

&lt;p&gt;In order to automate the various steps required to deploy my website, I created a simple script &lt;code&gt;deploy.sh&lt;/code&gt; to run all the steps in one shot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/sh

# clean any old website data
rm -r public/*

# generate new website data
hugo

# commit and push the new content
cd public
git add -A
git commit -m &amp;quot;website update&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started With Hugo</title>
      <link>http://chad-g-adams.github.io/post/2016/05/24/getting-started-with-hugo/</link>
      <pubDate>Tue, 24 May 2016 09:27:14 -0400</pubDate>
      
      <guid>http://chad-g-adams.github.io/post/2016/05/24/getting-started-with-hugo/</guid>
      <description>

&lt;h1 id=&#34;overview:86024dcf7244259db6089302c01d25e4&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Setting up a website these days can be done at no cost other than a bit of time. I thought it would be interesting to spend a weekend playing around with some of the available tools. This article covers how I set up my site, using &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; to generate my content, and &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; to host.&lt;/p&gt;

&lt;h1 id=&#34;hugo:86024dcf7244259db6089302c01d25e4&#34;&gt;Hugo&lt;/h1&gt;

&lt;p&gt;For simple sites, such as blogs, there are good reasons to prefer static site generators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Better security&lt;/strong&gt;: everything becomes simple static content so it significantly limits the areas of exposure to hackers; there are no logins, passwords, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: the site will load quickly and be responsive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline editing&lt;/strong&gt;: I can continue to create content when I&amp;rsquo;m offline, although that is becoming less and less of an issue these days&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt; is a static site generator written in Go. I chose Hugo because it was open source with an active community, and because I also have an interest in learning the Go language (not that you need worry about that when building your website with Hugo).&lt;/p&gt;

&lt;h1 id=&#34;hugo-workflow:86024dcf7244259db6089302c01d25e4&#34;&gt;Hugo Workflow&lt;/h1&gt;

&lt;p&gt;Using Hugo was an absolute pleasure. There are &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;good tutorials&lt;/a&gt; on Hugo available, so I will just cover some of the highlights here to demonstrate how easy it is.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-new-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Creating a new site&lt;/h2&gt;

&lt;p&gt;One simple command will create you a new site&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site mySiteName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a new folder called &lt;code&gt;mySiteName/&lt;/code&gt; and bootstrap it with the required directory structure.&lt;/p&gt;

&lt;h2 id=&#34;create-new-content:86024dcf7244259db6089302c01d25e4&#34;&gt;Create new content&lt;/h2&gt;

&lt;p&gt;Creating a new post is as simple as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/my-post-name.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The post file &lt;code&gt;my-post-name.md&lt;/code&gt; appears in the &lt;code&gt;mySiteName/content/post/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The basic premise of Hugo is that your content is organized in a specific way on purpose. Hence the filesystem organization of your content matches the URL at which it is hosted. For example content file at &lt;code&gt;content/foo/bar/myFirstPost.md&lt;/code&gt; will be hosted at &lt;code&gt;&amp;lt;site&amp;gt;/foo/bar/myFirstPost&lt;/code&gt; (By default - however that is fully configurable).&lt;/p&gt;

&lt;h2 id=&#34;editing-content:86024dcf7244259db6089302c01d25e4&#34;&gt;Editing content&lt;/h2&gt;

&lt;p&gt;Post content is generally a plain text file (which means I am writing everything in vim, hooray!). Hugo has native support for &lt;a href=&#34;http://daringfireball.net/projects/markdown/basics&#34;&gt;Markdown&lt;/a&gt; language.&lt;/p&gt;

&lt;p&gt;Every content file begins with a section of metadata that allows you to specify information about the content, like the title, date, tags, or any arbitrary data you would use to classify your content.&lt;/p&gt;

&lt;h2 id=&#34;pick-a-theme:86024dcf7244259db6089302c01d25e4&#34;&gt;Pick a Theme&lt;/h2&gt;

&lt;p&gt;Next you pick a theme for your site. I used &lt;strong&gt;&lt;a href=&#34;https://github.com/zyro/hyde-x&#34;&gt;hyde-x&lt;/a&gt;&lt;/strong&gt;, with a few tweaks (more to come on that in a later post).&lt;/p&gt;

&lt;h2 id=&#34;preview-your-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Preview Your Site&lt;/h2&gt;

&lt;p&gt;Alright, we have some content now, let&amp;rsquo;s test it out. Hugo comes with a built-in HTTP server. Launch the server with a simple command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo serve
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And connect a browser to the endpoint to view your site. Boom!&lt;/p&gt;

&lt;p&gt;Could it be any easier?&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a cool feature: your browser &lt;em&gt;automatically updates instantly&lt;/em&gt; as you edit your site&amp;rsquo;s content! This makes your web development cycle a very tight loop.&lt;/p&gt;

&lt;h2 id=&#34;publish-your-site:86024dcf7244259db6089302c01d25e4&#34;&gt;Publish Your Site&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;re satisfied with your site, it&amp;rsquo;s time to publish. Running the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generates a folder &lt;code&gt;public/&lt;/code&gt; with all the static HTML, CSS, etc needed for your site.  That folder can then be dropped onto a web server, or hosted by an external service (such as GitHub Pages - I will be going into that in &lt;a href=&#34;http://chad-g-adams.github.io/post/2016/05/26/hosting-a-hugo-site-on-github-pages/&#34;&gt;my next post&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&#34;my-hugo-content:86024dcf7244259db6089302c01d25e4&#34;&gt;My Hugo Content&lt;/h1&gt;

&lt;p&gt;For reference, the Hugo code for this website can be found on my github repo &lt;a href=&#34;https://github.com/chad-g-adams/chad-g-adams-hugo&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>